---
description: 
globs: 
alwaysApply: false
---
---
description: Framework for parsing PRDs into tasks and managing implementation workflow.
globs: **/*
alwaysApply: false
---

# Task Parsing and Execution

- Parse the PRD to extract all actionable tasks and subtasks.
- Create a structured task list in JSON format (tasks.json) with dependencies, priorities, and test strategies.
- For each task:
  - Generate a clear description and acceptance criteria.
  - Implement tasks sequentially, updating progress after each step.
  - Mark completed tasks and move to the next.
- Maintain progress tracking and update the PRD and documentation as tasks are completed.
- Ask for user review after each major milestone.



# EasyFill App - Implementation Task List

This file tracks the implementation progress based on `plan.mdc`.

## Phase 1: Navigation, Routing, and UI Consistency
- [x] **FR-1.4: Rename Onboarding Route**
    - [x] Rename the directory `app/slp-onboard` to `app/onboarding`.
    - [x] Perform a global search for `/slp-onboard` and replace all instances with `/onboarding`.
- [x] **FR-1.1 & FR-1.3: Fix Back Button Behavior (WT-Shakti-SLP & Post-Onboarding)**
    - [x] Analyze and fix navigation logic in `app/verticals/wt-shakti-slp/dashboard/page.tsx` to use `router.push()`.
    - [x] Analyze and fix redirection logic in `app/contexts/AuthContext.tsx` to use `router.replace()` after onboarding.
- [x] **FR-1.2: Implement "Back To Vertical Selection" Button**
    - [x] Verify `app/components/BackToVerticalButton.tsx` exists and is functional.
    - [x] Systematically add `<BackToVerticalButton />` to all vertical dashboards where it is missing.
- [x] **FR-2.1: Unify Logout Buttons**
    - [x] Identify all pages with logout mechanisms within verticals.
    - [x] Replace icon-based logout buttons with a standardized text-based button.

## Phase 2: Internationalization (i18n) and Vertical Parity
- [x] **FR-2.2: Fix i18n Issues**
    - [x] Add/update Hindi translations for `wtm.slp_dashboard` and other keys in `app/i18n/hi.json`.
    - [x] Wrap untranslated strings in `app/verticals/wt-shakti-slp/` with the `t()` function.
    - [x] Add new translation keys to `en.json` and `hi.json`.
- [x] **FR-3.1: WTM-SLP & WT-Shakti-SLP Parity**
    - [x] **Update Meeting - Duplicates:** Fix Firestore query to filter out invalid meeting data.
    - [x] **Update Meeting - 404 Error:** Correct the dynamic route link for editing meetings to pass the document ID properly.
    - [x] **Component Refactoring:** Create and use generic, reusable form components for "Add," "Update Meeting," and "Update Activity" in both verticals.

## Phase 3: Shakti-Abhiyaan Modifications & Centralized Data Sourcing
- [x] **FR-4.1: Centralize Dropdown Options**
    - [x] Create a script to parse `mapping.csv` and extract unique `as_name`, `ds_name`, and `block_name` for "BR".
    - [x] Create `lib/formData.ts` to store and export the extracted data.
    - [x] Refactor all "Assembly," "District," and "Block" dropdowns to use `lib/formData.ts`.
- [x] **FR-3.2: Implement Shakti-Abhiyaan Changes**
    - [x] **Zone Selection:** Create `lib/zoneData.json` and implement zone-based filtering for the Assembly dropdown.
    - [x] **Form Fields:** Replace "address" with `Block`, `Village`, and `Panchayat` fields.
    - [x] **Club Members:** Use `useFieldArray` to implement dynamic member fields.

## Phase 4: Data Management Analysis and Confirmation
- [x] **FR-4.2: Backend Data Handling Investigation**
    - [x] Confirm `form_type` usage in all `firestoreService` calls.
    - [x] Document the data schema and target collection for every form.
    - [x] Determine if SLP-Activity uses real-time or one-time data fetches.
    - [x] Compile findings into `docs/data_handling_report.md`.
- [x] **FR-3.3: Confirm Hostel/Training Data**
    - [x] Inspect Hostel and Training dashboards to check for dummy data.
    - [x] Report findings.
